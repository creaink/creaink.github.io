<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Creaink - Build something for life</title>
    <link>https://creaink.github.io/</link>
    <description>Recent content on Creaink - Build something for life</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 18 Feb 2019 09:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://creaink.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring Boot：（五）Middware</title>
      <link>https://creaink.github.io/post/Backend/SpringBoot/Spring-boot-middware.html</link>
      <pubDate>Mon, 18 Feb 2019 09:00:00 +0800</pubDate>
      
      <guid>https://creaink.github.io/post/Backend/SpringBoot/Spring-boot-middware.html</guid>
      <description>拦截器 &amp;amp; 过滤器 先来说说者的区别： filter 属于 servlet 的概念需要在 web.xml 里定义，不可以使用 Spring 上下文里的资源。 interceptor 属于 Spring 的概念，可以使用 Spring 上下文里的资源。 总的来说</description>
    </item>
    
    <item>
      <title>Spring Boot：（四）Cache</title>
      <link>https://creaink.github.io/post/Backend/SpringBoot/Spring-boot-cache.html</link>
      <pubDate>Mon, 11 Feb 2019 10:10:00 +0800</pubDate>
      
      <guid>https://creaink.github.io/post/Backend/SpringBoot/Spring-boot-cache.html</guid>
      <description>&lt;p&gt;当请求的数量达到一定的规模，这时候频繁的数据库请求就算使用数据库集群也很难承受的了，这时候可以将一些信息存于缓存当中，避免请求直接大量的&lt;strong&gt;怼&lt;/strong&gt;到数据库上。而如何实现缓存的策略是使用&lt;strong&gt;数据库 + 缓存&lt;/strong&gt;当中的至关重要的一步，Spring Boot 对缓存的支持也是很方便的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spring Boot：（三）ORM</title>
      <link>https://creaink.github.io/post/Backend/SpringBoot/Spring-boot-db.html</link>
      <pubDate>Wed, 06 Feb 2019 14:10:00 +0800</pubDate>
      
      <guid>https://creaink.github.io/post/Backend/SpringBoot/Spring-boot-db.html</guid>
      <description>Spring Boot 结合 ORM 可以非常方便快捷地进行数据库的配置、链接、查询等操作。 准备 先解决 Jackson 和 数据库的时区问题，在配置文件当中加入： 1 2 spring.jackson.time-zone=GMT+8 spring.datasource.url=jdbc:mysql://localhost:3306/dbname?serverTimezone=GMT%2B8 datasource DataSource 是 Spring 简化数据</description>
    </item>
    
    <item>
      <title>Spring Boot：（二）MVC</title>
      <link>https://creaink.github.io/post/Backend/SpringBoot/Spring-boot-mvc.html</link>
      <pubDate>Wed, 30 Jan 2019 22:00:00 +0800</pubDate>
      
      <guid>https://creaink.github.io/post/Backend/SpringBoot/Spring-boot-mvc.html</guid>
      <description>Spring Boot 可以使用 Spring MVC 处理 HTTP 请求。 配置文件 Spring 的 @Value 值注入方式不再赘述，参考Spring 环境抽象 。这里注重介绍的是 Spring boot 的多环境配置。 都知道通过 Spring 的 @Profile(&amp;quot;development/production&amp;quot;) 可</description>
    </item>
    
    <item>
      <title>Spring Boot：（一）工程搭建</title>
      <link>https://creaink.github.io/post/Backend/SpringBoot/Spring-boot-intro.html</link>
      <pubDate>Mon, 28 Jan 2019 10:00:00 +0800</pubDate>
      
      <guid>https://creaink.github.io/post/Backend/SpringBoot/Spring-boot-intro.html</guid>
      <description>&lt;p&gt;Spring Boot 让我们的 Spring 应用变的更轻量化，可以仅仅依靠一个 Java 类来运行一个 Spring 引用。你也可以打包你的应用为 jar 并通过使用 &lt;code&gt;java -jar&lt;/code&gt; 命令来运行你的 Spring Web应用（这一点非常方便 dockerized）。而不需要从 servlet 开始一步步的写 xml 配置文件，而 Spring Boot 的提供的各种 starter 更是会自动配置，避免了各种繁琐的 xml 文件的编写，方便了各种模块的快速集成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spring framework 之面向切面编程</title>
      <link>https://creaink.github.io/post/Backend/JavaWeb/Spring/Spring-framework-aop.html</link>
      <pubDate>Wed, 23 Jan 2019 14:05:00 +0800</pubDate>
      
      <guid>https://creaink.github.io/post/Backend/JavaWeb/Spring/Spring-framework-aop.html</guid>
      <description>&lt;p&gt;AOP(Aspect-Oriented-Programming) 面向切面编程，其原理是使用动态代理去间接的调用接口，以方便代理者在代理调用过程前后加入私货（重复代码）的处理，以简化代码。也达到了在线性逻辑当中，以非入侵方式的切开线性逻辑加入自己的逻辑面（切面），是对面向对象的思维方式的一种有力的补充。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spring framework 之依赖注入</title>
      <link>https://creaink.github.io/post/Backend/JavaWeb/Spring/Spring-framework-di.html</link>
      <pubDate>Fri, 18 Jan 2019 20:49:33 +0800</pubDate>
      
      <guid>https://creaink.github.io/post/Backend/JavaWeb/Spring/Spring-framework-di.html</guid>
      <description>&lt;p&gt;Spring framework 系列之依赖注入，将对象之间的依赖关系减弱，进而其实例化也交给 Spring，Spring 维护一个上下文，并以声明式的方式对依赖进行满足（注入），进一步的强化面向接口编程的思想。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MSYS2 和 mintty 打造 Windows 下 Linux 工具体验</title>
      <link>https://creaink.github.io/post/Computer/Windows/win-msys2.html</link>
      <pubDate>Sat, 12 Jan 2019 16:42:33 +0800</pubDate>
      
      <guid>https://creaink.github.io/post/Computer/Windows/win-msys2.html</guid>
      <description>&lt;p&gt;通过对 MSYS2 的一顿操作，可以获得在 Windows 下比较畅快的 Linux 工具的体验，体验到 Vim、Tmux、zsh、Git、MinGW-w64 等优秀的工具：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2019/01/11/5c3860c8bfd9f.png&#34; alt=&#34;最终效果图&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux Namespace 技术与 Docker 原理浅析</title>
      <link>https://creaink.github.io/post/Computer/Linux/Linux-namespace.html</link>
      <pubDate>Tue, 08 Jan 2019 20:49:33 +0800</pubDate>
      
      <guid>https://creaink.github.io/post/Computer/Linux/Linux-namespace.html</guid>
      <description>&lt;p&gt;这片文章的起因是源于一个 YouTube 上的视频 &lt;a href=&#34;https://www.youtube.com/watch?v=HPuvDm8IC-4&#34; target=&#34;_blank&#34;&gt;Golang UK Conf. 2016 - Liz Rice - What is a container, really? Let&amp;rsquo;s write one in Go from scratch&lt;/a&gt;，看了之后觉得很不错，一个主题可以贯穿起来很多 Linux 的知识，也对容器、Docker 技术的原理做了次实践，对理解容器的特点和局限性很有帮助，这里我做了些修改和扩展然后再分享给大家。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hugo 搭建博客实践</title>
      <link>https://creaink.github.io/post/Devtools/Hugo/Hugo-intro.html</link>
      <pubDate>Tue, 08 Jan 2019 19:27:12 +0800</pubDate>
      
      <guid>https://creaink.github.io/post/Devtools/Hugo/Hugo-intro.html</guid>
      <description>&lt;p&gt;如何利用 Hugo 构建一个方便于 markdown 发表博客和记笔记的统一工程，这篇文章给出了我实践中的一种思路：利用 Git 的 submodule 组合了笔记仓库、GitHub Pages仓库、Hugo 主题仓库、Hugo 博客仓库等四个 Git 仓库，构成一个利用开源工具实现的的分布式博客和笔记方案。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于</title>
      <link>https://creaink.github.io/about.html</link>
      <pubDate>Mon, 07 Jan 2019 16:28:35 +0800</pubDate>
      
      <guid>https://creaink.github.io/about.html</guid>
      <description>一无所有</description>
    </item>
    
    <item>
      <title>友链</title>
      <link>https://creaink.github.io/links.html</link>
      <pubDate>Mon, 07 Jan 2019 16:28:35 +0800</pubDate>
      
      <guid>https://creaink.github.io/links.html</guid>
      <description>友情链接 lfn</description>
    </item>
    
  </channel>
</rss>