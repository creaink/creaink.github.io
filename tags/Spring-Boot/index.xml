<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring Boot on Creaink - Build something for life</title>
    <link>https://creaink.github.io/tags/Spring-Boot.html</link>
    <description>Recent content in Spring Boot on Creaink - Build something for life</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 30 Jan 2019 22:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://creaink.github.io/tags/Spring-Boot/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring Boot：（二）MVC</title>
      <link>https://creaink.github.io/post/Backend/SpringBoot/Spring-boot-mvc.html</link>
      <pubDate>Wed, 30 Jan 2019 22:00:00 +0800</pubDate>
      
      <guid>https://creaink.github.io/post/Backend/SpringBoot/Spring-boot-mvc.html</guid>
      <description>Spring Boot MVC 配置文件 Spring 的 @Value 值注入方式不再赘述，参考Spring 环境抽象 。这里注重介绍的是 Spring boot 的多环境配置。 都知道通过 Spring 的 @Profile(&amp;quot;development/production&amp;quot;) 可以选择根据 spring.profiles.active/default 配置来是否</description>
    </item>
    
    <item>
      <title>Spring Boot：（一）工程搭建</title>
      <link>https://creaink.github.io/post/Backend/SpringBoot/Spring-boot-intro.html</link>
      <pubDate>Mon, 28 Jan 2019 10:00:00 +0800</pubDate>
      
      <guid>https://creaink.github.io/post/Backend/SpringBoot/Spring-boot-intro.html</guid>
      <description>&lt;p&gt;Spring Boot 让我们的 Spring 应用变的更轻量化，可以仅仅依靠一个 Java 类来运行一个 Spring 引用。你也可以打包你的应用为 jar 并通过使用 &lt;code&gt;java -jar&lt;/code&gt; 命令来运行你的 Spring Web应用（这一点非常方便 dockerized）。而不需要从 servlet 开始一步步的写 xml 配置文件，而 Spring Boot 的提供的各种 starter 更是会自动配置，避免了各种繁琐的 xml 文件的编写，方便了各种模块的快速集成。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>