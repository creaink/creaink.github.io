<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring Boot on Creaink - Build something for life</title>
    <link>https://creaink.github.io/tags/Spring-Boot.html</link>
    <description>Recent content in Spring Boot on Creaink - Build something for life</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 02 May 2019 10:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://creaink.github.io/tags/Spring-Boot/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring Boot：（六）Spring Security 入门</title>
      <link>https://creaink.github.io/post/Backend/SpringBoot/Spring-boot-security.html</link>
      <pubDate>Thu, 02 May 2019 10:00:00 +0800</pubDate>
      
      <guid>https://creaink.github.io/post/Backend/SpringBoot/Spring-boot-security.html</guid>
      <description>快速入门 首先新建一个 spring boot 带有 spring-boot-starter-web 的依赖的项目。然后加入 security starter 的依赖如下。 1 2 3 4 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 之后访问任意前端页面就会发现跳转到 spring security 自带的登录页面了，</description>
    </item>
    
    <item>
      <title>Spring Boot：（五）Middware</title>
      <link>https://creaink.github.io/post/Backend/SpringBoot/Spring-boot-middware.html</link>
      <pubDate>Mon, 18 Feb 2019 09:00:00 +0800</pubDate>
      
      <guid>https://creaink.github.io/post/Backend/SpringBoot/Spring-boot-middware.html</guid>
      <description>拦截器 &amp;amp; 过滤器 先来说说者的区别： filter 属于 servlet 的概念需要在 web.xml 里定义，不可以使用 Spring 上下文里的资源。 interceptor 属于 Spring 的概念，可以使用 Spring 上下文里的资源。 总的来说</description>
    </item>
    
    <item>
      <title>Spring Boot：（四）Cache</title>
      <link>https://creaink.github.io/post/Backend/SpringBoot/Spring-boot-cache.html</link>
      <pubDate>Mon, 11 Feb 2019 10:10:00 +0800</pubDate>
      
      <guid>https://creaink.github.io/post/Backend/SpringBoot/Spring-boot-cache.html</guid>
      <description>&lt;p&gt;当请求的数量达到一定的规模，这时候频繁的数据库请求就算使用数据库集群也很难承受的了，这时候可以将一些信息存于缓存当中，避免请求直接大量的&lt;strong&gt;怼&lt;/strong&gt;到数据库上。而如何实现缓存的策略是使用&lt;strong&gt;数据库 + 缓存&lt;/strong&gt;当中的至关重要的一步，Spring Boot 对缓存的支持也是很方便的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spring Boot：（三）ORM</title>
      <link>https://creaink.github.io/post/Backend/SpringBoot/Spring-boot-db.html</link>
      <pubDate>Wed, 06 Feb 2019 14:10:00 +0800</pubDate>
      
      <guid>https://creaink.github.io/post/Backend/SpringBoot/Spring-boot-db.html</guid>
      <description>Spring Boot 结合 ORM 可以非常方便快捷地进行数据库的配置、链接、查询等操作。 准备 先解决 Jackson 和 数据库的时区问题，在配置文件当中加入： 1 2 spring.jackson.time-zone=GMT+8 spring.datasource.url=jdbc:mysql://localhost:3306/dbname?serverTimezone=GMT%2B8 datasource DataSource 是 Spring 简化数据</description>
    </item>
    
    <item>
      <title>Spring Boot：（二）MVC</title>
      <link>https://creaink.github.io/post/Backend/SpringBoot/Spring-boot-mvc.html</link>
      <pubDate>Wed, 30 Jan 2019 22:00:00 +0800</pubDate>
      
      <guid>https://creaink.github.io/post/Backend/SpringBoot/Spring-boot-mvc.html</guid>
      <description>Spring Boot 可以使用 Spring MVC 处理 HTTP 请求。 配置文件 Spring 的 @Value 值注入方式不再赘述，参考Spring 环境抽象 。这里注重介绍的是 Spring boot 的多环境配置。 都知道通过 Spring 的 @Profile(&amp;quot;development/production&amp;quot;) 可</description>
    </item>
    
    <item>
      <title>Spring Boot：（一）工程搭建</title>
      <link>https://creaink.github.io/post/Backend/SpringBoot/Spring-boot-intro.html</link>
      <pubDate>Mon, 28 Jan 2019 10:00:00 +0800</pubDate>
      
      <guid>https://creaink.github.io/post/Backend/SpringBoot/Spring-boot-intro.html</guid>
      <description>&lt;p&gt;Spring Boot 让我们的 Spring 应用变的更轻量化，可以仅仅依靠一个 Java 类来运行一个 Spring 引用。你也可以打包你的应用为 jar 并通过使用 &lt;code&gt;java -jar&lt;/code&gt; 命令来运行你的 Spring Web应用（这一点非常方便 dockerized）。而不需要从 servlet 开始一步步的写 xml 配置文件，而 Spring Boot 的提供的各种 starter 更是会自动配置，避免了各种繁琐的 xml 文件的编写，方便了各种模块的快速集成。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>