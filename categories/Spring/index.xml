<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring on Creaink - Build something for life</title>
    <link>https://creaink.github.io/categories/Spring.html</link>
    <description>Recent content in Spring on Creaink - Build something for life</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 06 Feb 2019 14:10:00 +0800</lastBuildDate>
    
	<atom:link href="https://creaink.github.io/categories/Spring/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Spring Boot：（三）ORM</title>
      <link>https://creaink.github.io/post/Backend/SpringBoot/Spring-boot-db.html</link>
      <pubDate>Wed, 06 Feb 2019 14:10:00 +0800</pubDate>
      
      <guid>https://creaink.github.io/post/Backend/SpringBoot/Spring-boot-db.html</guid>
      <description>准备 先解决 Jackson 和 数据库的时区问题，在配置文件当中加入： 1 2 spring.jackson.time-zone=GMT+8 spring.datasource.url=jdbc:mysql://localhost:3306/dbname?serverTimezone=GMT%2B8 datasource DataSource 是 Spring 简化数据库配置的方式，首先加入数据库的依赖 1 2 3 4 5 6 7 8 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-jdbc&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;</description>
    </item>
    
    <item>
      <title>Spring Boot：（二）MVC</title>
      <link>https://creaink.github.io/post/Backend/SpringBoot/Spring-boot-mvc.html</link>
      <pubDate>Wed, 30 Jan 2019 22:00:00 +0800</pubDate>
      
      <guid>https://creaink.github.io/post/Backend/SpringBoot/Spring-boot-mvc.html</guid>
      <description>Spring Boot MVC 配置文件 Spring 的 @Value 值注入方式不再赘述，参考Spring 环境抽象 。这里注重介绍的是 Spring boot 的多环境配置。 都知道通过 Spring 的 @Profile(&amp;quot;development/production&amp;quot;) 可以选择根据 spring.profiles.active/default 配置来是否</description>
    </item>
    
    <item>
      <title>Spring Boot：（一）工程搭建</title>
      <link>https://creaink.github.io/post/Backend/SpringBoot/Spring-boot-intro.html</link>
      <pubDate>Mon, 28 Jan 2019 10:00:00 +0800</pubDate>
      
      <guid>https://creaink.github.io/post/Backend/SpringBoot/Spring-boot-intro.html</guid>
      <description>&lt;p&gt;Spring Boot 让我们的 Spring 应用变的更轻量化，可以仅仅依靠一个 Java 类来运行一个 Spring 引用。你也可以打包你的应用为 jar 并通过使用 &lt;code&gt;java -jar&lt;/code&gt; 命令来运行你的 Spring Web应用（这一点非常方便 dockerized）。而不需要从 servlet 开始一步步的写 xml 配置文件，而 Spring Boot 的提供的各种 starter 更是会自动配置，避免了各种繁琐的 xml 文件的编写，方便了各种模块的快速集成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spring framework 之面向切面编程</title>
      <link>https://creaink.github.io/post/Backend/JavaWeb/Spring/Spring-framework-aop.html</link>
      <pubDate>Wed, 23 Jan 2019 14:05:00 +0800</pubDate>
      
      <guid>https://creaink.github.io/post/Backend/JavaWeb/Spring/Spring-framework-aop.html</guid>
      <description>&lt;p&gt;AOP(Aspect-Oriented-Programming) 面向切面编程，其原理是使用动态代理去间接的调用接口，以方便代理者在代理调用过程前后加入私货（重复代码）的处理，以简化代码。也达到了在线性逻辑当中，以非入侵方式的切开线性逻辑加入自己的逻辑面（切面），是对面向对象的思维方式的一种有力的补充。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spring framework 之依赖注入</title>
      <link>https://creaink.github.io/post/Backend/JavaWeb/Spring/Spring-framework-di.html</link>
      <pubDate>Fri, 18 Jan 2019 20:49:33 +0800</pubDate>
      
      <guid>https://creaink.github.io/post/Backend/JavaWeb/Spring/Spring-framework-di.html</guid>
      <description>&lt;p&gt;Spring framework 系列之依赖注入，将对象之间的依赖关系减弱，进而其实例化也交给 Spring，Spring 维护一个上下文，并以声明式的方式对依赖进行满足（注入），进一步的强化面向接口编程的思想。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>